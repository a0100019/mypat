package com.a0100019.mypat.presentation.daily.walk

import android.app.Application
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.a0100019.mypat.data.room.user.User
import com.a0100019.mypat.data.room.user.UserDao
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.CoroutineExceptionHandler
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import org.orbitmvi.orbit.Container
import org.orbitmvi.orbit.ContainerHost
import org.orbitmvi.orbit.syntax.simple.intent
import org.orbitmvi.orbit.syntax.simple.postSideEffect
import org.orbitmvi.orbit.syntax.simple.reduce
import org.orbitmvi.orbit.viewmodel.container
import javax.annotation.concurrent.Immutable
import javax.inject.Inject

@HiltViewModel
class WalkViewModel @Inject constructor(
    private val userDao: UserDao,
    private val application: Application,
    private val stepCounterManager: StepCounterManager

) : ViewModel(), ContainerHost<WalkState, WalkSideEffect> {

    override val container: Container<WalkState, WalkSideEffect> = container(
        initialState = WalkState(),
        buildSettings = {
            this.exceptionHandler = CoroutineExceptionHandler { _, throwable ->
                intent {
                    postSideEffect(WalkSideEffect.Toast(message = throwable.message.orEmpty()))
                }
            }
        }
    )

    private val _todayWalk = MutableStateFlow(0)
    val todayWalk: StateFlow<Int> = _todayWalk

//    // Î∑∞ Î™®Îç∏ Ï¥àÍ∏∞Ìôî Ïãú Î™®Îì† user Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìú Î∞è Í±∏Ïùå Ïàò Ï∂îÏ†Å ÏãúÏûë
//    init {
//        loadData()
//    }
//
//    private fun loadData() = intent {
//    }


    init {
//        startForegroundService() // ‚úÖ Ïï±Ïù¥ Ïã§ÌñâÎê† Îïå ÏûêÎèôÏúºÎ°ú Foreground Service ÏãúÏûë
//        observeSteps() // ‚úÖ Í±∏Ïùå Ïàò Í∞êÏßÄ
        observeStepCount()
        stepCounterManager.startListening()
    }

    private fun observeStepCount() {
        viewModelScope.launch {
            stepCounterManager.stepCount.collectLatest { steps ->
                _todayWalk.value = steps // ‚úÖ Ïò¨Î∞îÎ•¥Í≤å Í∞í ÏóÖÎç∞Ïù¥Ìä∏
                intent {
                    reduce { state.copy(todayWalk = steps) } // ‚úÖ _todayWalk -> steps Í∞í ÏÇ¨Ïö©
                }
            }
        }
    }

//
//    // ‚úÖ Í±∏Ïùå Ïàò Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ Î∞è ÏóÖÎç∞Ïù¥Ìä∏
//    private fun observeSteps() {
//        viewModelScope.launch {
//            StepCounterService.stepsFlow.collectLatest { stepCount ->
//                intent {
//                    reduce { state.copy(todayWalk = stepCount) }
//                }
//                Log.d("WalkViewModel", "‚úÖ Í±∏Ïùå Ïàò ÏóÖÎç∞Ïù¥Ìä∏Îê®: $stepCount")
//            }
//        }
//    }
//
//    fun startForegroundService() {
//        Log.d("WalkViewModel", "‚úÖ Foreground Service ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠Îê®")
//
//        val intent = Intent(application, StepCounterService::class.java)
//
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            application.startForegroundService(intent)
//            Log.d("WalkViewModel", "‚úÖ startForegroundService Ìò∏Ï∂úÎê®")
//        } else {
//            application.startService(intent)
//            Log.d("WalkViewModel", "‚úÖ startService Ìò∏Ï∂úÎê®")
//        }
//    }
//
//
//    // ‚úÖ Foreground Service Ï§ëÏßÄ
//    fun stopForegroundService() {
//        Log.d("WalkViewModel", "üö® Foreground Service Ï§ëÏßÄ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®")
//        val intent = Intent(application, StepCounterService::class.java)
//        application.stopService(intent)
//    }
}


@Immutable
data class WalkState(
    val todayWalk: Int = 0, // ‚úÖ Í±∏Ïùå Ïàò Ï†ÄÏû• (Ï¥àÍ∏∞Í∞í 0)
    val userData: List<User> = emptyList()
)

sealed interface WalkSideEffect {
    class Toast(val message: String) : WalkSideEffect
}
