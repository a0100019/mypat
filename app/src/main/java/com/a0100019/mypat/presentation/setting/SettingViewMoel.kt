package com.a0100019.mypat.presentation.setting

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.a0100019.mypat.data.room.diary.DiaryDao
import com.a0100019.mypat.data.room.english.EnglishDao
import com.a0100019.mypat.data.room.item.Item
import com.a0100019.mypat.data.room.item.ItemDao
import com.a0100019.mypat.data.room.koreanIdiom.KoreanIdiomDao
import com.a0100019.mypat.data.room.pet.Pat
import com.a0100019.mypat.data.room.pet.PatDao
import com.a0100019.mypat.data.room.sudoku.SudokuDao
import com.a0100019.mypat.data.room.user.User
import com.a0100019.mypat.data.room.user.UserDao
import com.a0100019.mypat.data.room.walk.WalkDao
import com.a0100019.mypat.data.room.world.World
import com.a0100019.mypat.data.room.world.WorldDao
import com.google.firebase.Firebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.firestore
import com.google.firebase.storage.FirebaseStorage
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.CoroutineExceptionHandler
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import org.orbitmvi.orbit.Container
import org.orbitmvi.orbit.ContainerHost
import org.orbitmvi.orbit.syntax.simple.intent
import org.orbitmvi.orbit.syntax.simple.postSideEffect
import org.orbitmvi.orbit.syntax.simple.reduce
import org.orbitmvi.orbit.viewmodel.container
import javax.annotation.concurrent.Immutable
import javax.inject.Inject


@Suppress("IMPLICIT_CAST_TO_ANY")
@HiltViewModel
class SettingViewModel @Inject constructor(
    private val userDao: UserDao,
    private val patDao: PatDao,
    private val itemDao: ItemDao,
    private val diaryDao: DiaryDao,
    private val englishDao: EnglishDao,
    private val koreanIdiomDao: KoreanIdiomDao,
    private val sudokuDao: SudokuDao,
    private val walkDao: WalkDao,
    private val worldDao: WorldDao
) : ViewModel(), ContainerHost<SettingState, SettingSideEffect> {

    override val container: Container<SettingState, SettingSideEffect> = container(
        initialState = SettingState(),
        buildSettings = {
            this.exceptionHandler = CoroutineExceptionHandler { _ , throwable ->
                intent {
                    postSideEffect(SettingSideEffect.Toast(message = throwable.message.orEmpty()))
                }
            }
        }
    )

    // Î∑∞ Î™®Îç∏ Ï¥àÍ∏∞Ìôî Ïãú Î™®Îì† user Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìú
    init {
        loadData()
    }

    //roomÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò¥
    private fun loadData() = intent {
        val userDataList = userDao.getAllUserData()
        val googleLoginState = FirebaseAuth.getInstance().currentUser != null
        val itemDataList = itemDao.getAllItemData()
        val patDataList = patDao.getAllPatData()
        val worldDataList = worldDao.getAllWorldData()

        reduce {
            state.copy(
                userDataList = userDataList,
                googleLoginState = googleLoginState,
                itemDataList = itemDataList,
                patDataList = patDataList,
                worldDataList = worldDataList
            )
        }
    }

    fun onCloseClick() = intent {
        reduce {
            state.copy(
                settingSituation = ""
            )
        }
    }

    fun onTermsClick() = intent {
        try {
            val uri = FirebaseStorage.getInstance()
                .reference.child("sample.png")
                .downloadUrl.await()

            reduce {
                state.copy(imageUrl = uri.toString())
            }
        } catch (e: Exception) {
            // Ïã§Ìå® Ï≤òÎ¶¨ Í∞ÄÎä•
        }
    }

    fun onSituationChange(situation: String) = intent {
        reduce {
            state.copy(
                settingSituation = situation
            )
        }
    }

    fun onSignOutClick() = intent {

        FirebaseAuth.getInstance().signOut()
        // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê nullÏù¥Î©¥ Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ
        val currentUser = FirebaseAuth.getInstance().currentUser
        if (currentUser == null) {
            // ‚úÖ Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ
            // ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
            userDao.update(id = "auth", value = "0")
            postSideEffect(SettingSideEffect.Toast("Î°úÍ∑∏ÏïÑÏõÉ ÎêòÏóàÏäµÎãàÎã§"))
            postSideEffect(SettingSideEffect.NavigateToLoginScreen)
        } else {
            // ‚ùå Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®
            postSideEffect(SettingSideEffect.Toast("Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§"))
        }

    }

    fun dataSave() = intent {

        val db = Firebase.firestore
        val userId = state.userDataList.find { it.id == "auth" }!!.value
        val userDataList = state.userDataList
        val itemDataList = state.itemDataList
        val patDataList = state.patDataList
        val worldDataList = state.worldDataList

        val userData = mapOf(
            "cash" to userDataList.find { it.id == "money"}!!.value2,
            "community" to mapOf(
                "ban" to userDataList.find { it.id == "community"}!!.value3,
                "like" to userDataList.find { it.id == "community"}!!.value,
                "warning" to userDataList.find {it.id == "community"}!!.value2
            ),
            "firstDate" to userDataList.find { it.id == "date"}!!.value3,
            "item" to mapOf(
                "openItem" to itemDataList.count { it.date != "0"},
                "openItemSpace" to userDataList.find { it.id == "item"}!!.value2,
                "useItem" to userDataList.find { it.id == "item"}!!.value3
            ),
            "map" to worldDataList.find { it.id == 1}!!.value,
            "money" to userDataList.find { it.id == "money"}!!.value,
            "name" to userDataList.find { it.id == "name"}!!.value,
            "pat" to mapOf(
                "openPat" to patDataList.count { it.date != "0"},
                "openPatSpace" to userDataList.find { it.id == "pat"}!!.value2,
                "usePat" to userDataList.find { it.id == "pat"}!!.value3
            ),
            "totalDate" to userDataList.find { it.id == "date"}!!.value2,
        )

        //ÏõîÎìú Îç∞Ïù¥ÌÑ∞
        val worldMap = worldDataList.drop(1)
            .mapIndexed { index, data ->

                if(data.type == "pat") {
                    val patData = patDataList.find { it.id == data.value.toInt() }
                    // indexÎäî 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎãàÍπå +1 Ìï¥ÏÑú Î¨∏ÏûêÏó¥Î°ú ÎßåÎì¶
                    index.toString() to mapOf(
                        "id" to data.value,
                        "size" to patData!!.sizeFloat,
                        "type" to data.type,
                        "x" to patData.x,
                        "y" to patData.y
                    )
                } else {
                    val itemData = itemDataList.find { it.id == data.value.toInt() }
                    // indexÎäî 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎãàÍπå +1 Ìï¥ÏÑú Î¨∏ÏûêÏó¥Î°ú ÎßåÎì¶
                    index.toString() to mapOf(
                        "id" to data.value,
                        "size" to itemData!!.sizeFloat,
                        "type" to data.type,
                        "x" to itemData.x,
                        "y" to itemData.y
                    )
                }

            }
            .toMap()

        val result = mapOf("world" to worldMap)


        db.collection("users")
            .document(userId)
            .set(result)
            .addOnSuccessListener {
                Log.d("Firestore", "world Ï†ÄÏû• ÏÑ±Í≥µ")
            }
            .addOnFailureListener { e ->
                Log.e("Firestore", "world Ï†ÄÏû• Ïã§Ìå®", e)
            }

        db.collection("users")
            .document(userId)
            .set(userData)
            .addOnSuccessListener {
                Log.d("Firestore", "Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏÑ±Í≥µ")
                // UI ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Îì±
            }
            .addOnFailureListener { e ->
                Log.e("Firestore", "Ï†ÄÏû• Ïã§Ìå®", e)
            }

    }

    fun onGoogleLoginClick(idToken: String) = intent {
        Log.e("login", "idToken = $idToken") // üîç Ïó¨Í∏∞ Ï∂îÍ∞Ä

        if (state.isLoggingIn) return@intent // Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏ Ï§ëÏù¥Î©¥ Î¶¨ÌÑ¥

        reduce { state.copy(isLoggingIn = true) }

        try {
            val credential = GoogleAuthProvider.getCredential(idToken, null)
            val authResult = FirebaseAuth.getInstance().signInWithCredential(credential).await()
            val user = authResult.user

            Log.e("login", "user = $user")

            user?.let {
                Log.e("login", "Î∑∞Î™®Îç∏ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ")
                userDao.update(id = "auth", value = it.uid)

                reduce {
                    state.copy(
                        googleLoginState = true
                    )
                }

                postSideEffect(SettingSideEffect.Toast("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ"))
            }
        } catch (e: Exception) {
            Log.e("login", "Î∑∞Î™®Îç∏ Î°úÍ∑∏Ïù∏ Ïã§Ìå®", e)
            postSideEffect(SettingSideEffect.Toast("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${e.localizedMessage}"))
        } finally {
            reduce { state.copy(isLoggingIn = false) }
            loadData()
        }
    }

    fun onAccountDeleteClick() = intent {
        val auth = FirebaseAuth.getInstance()
        val db = FirebaseFirestore.getInstance()

        // 1. Firestore Îç∞Ïù¥ÌÑ∞ Î®ºÏ†Ä ÏÇ≠Ï†ú
        db.collection("users").document(state.userDataList.find {it.id == "auth"}!!.value).delete()
            .addOnSuccessListener {
                Log.d("Firestore", "Ïú†Ï†Ä Î¨∏ÏÑú ÏÇ≠Ï†úÎê®")

                // 2. Authentication Í≥ÑÏ†ï ÏÇ≠Ï†ú
                auth.currentUser?.delete()
                    ?.addOnSuccessListener {
                        viewModelScope.launch {
                            userDao.update(id = "auth", value = "0")
                            postSideEffect(SettingSideEffect.Toast("Í≥ÑÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§."))
                            postSideEffect(SettingSideEffect.NavigateToLoginScreen)
                        }
                        Log.d("Auth", "Í≥ÑÏ†ï ÏÇ≠Ï†ú ÏôÑÎ£å")
                    }
                    ?.addOnFailureListener {
                        Log.e("Auth", "Í≥ÑÏ†ï ÏÇ≠Ï†ú Ïã§Ìå®", it)
                    }
            }
            .addOnFailureListener {
                Log.e("Firestore", "Î¨∏ÏÑú ÏÇ≠Ï†ú Ïã§Ìå®", it)
            }
    }

}


@Immutable
data class SettingState(
    val userDataList: List<User> = emptyList(),
    val isLoggingIn:Boolean = false,
    val googleLoginState: Boolean = false,
    val patDataList: List<Pat> = emptyList(),
    val itemDataList: List<Item> = emptyList(),
    val worldDataList: List<World> = emptyList(),
    val settingSituation: String = "",
    val imageUrl: String = ""
    )


sealed interface SettingSideEffect {
    class Toast(val message: String) : SettingSideEffect
    data object NavigateToLoginScreen : SettingSideEffect
}
